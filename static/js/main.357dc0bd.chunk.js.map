{"version":3,"sources":["reducer.js","components/Cart.js","components/CartList.js","components/Search.js","components/Scroll.js","action.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["initStateSearch","searchField","initStateRobots","isPending","robots","error","Cart","id","name","email","className","src","alt","CartList","roboComp","map","user","i","key","Search","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","border","children","requestRobots","dispatch","fetch","then","response","json","roboData","payload","catch","err","ErrorBoundary","state","hasError","info","this","setState","Component","App","onRequestRobots","onSearchChange","filterRobo","filter","robo","toLocaleLowerCase","includes","toLowerCase","connect","searchFieldReducer","e","target","value","trim","Boolean","window","location","hostname","match","logger","createLogger","store","createStore","combineReducers","action","Object","assign","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.357dc0bd.chunk.js","sourcesContent":["// search reducer\r\nconst initStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchFieldReducer = (state = initStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_SEARCH_FIELD\":\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n      break;\r\n    default:\r\n      return state;\r\n      break;\r\n  }\r\n};\r\n\r\n// Robots load reducer\r\nconst initStateRobots = { isPending: false, robots: [], error: \"\" };\r\n\r\nexport const requestRobots = (state = initStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case \"REQUEST_ROBOTS_SUCCESS\":\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false\r\n      });\r\n      break;\r\n    case \"REQUEST_ROBOTS_PENDING\":\r\n      return Object.assign({}, state, { isPending: true });\r\n      break;\r\n    case \"REQUEST_ROBOTS_FAILED\":\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false\r\n      });\r\n      break;\r\n    default:\r\n      return state;\r\n      break;\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst Cart = ({ id, name, email }) => (\r\n  <div className=\"bg-light-green dib br3 pa3 ma2 grow\">\r\n    <img src={`https://robohash.org/${id}?200*300`} alt=\"robo\" />\r\n    <h2>{name}</h2>\r\n    <p>Email:{email}</p>\r\n  </div>\r\n);\r\n\r\nexport default Cart;\r\n","import React from \"react\";\r\nimport Cart from \"./Cart\";\r\n\r\nconst CartList = ({ robots }) => {\r\n  const roboComp = robots.map((user, i) => {\r\n    return <Cart id={user.id} name={user.name} email={user.email} key={i} />;\r\n  });\r\n  return <div>{roboComp}</div>;\r\n};\r\nexport default CartList;\r\n","import React from \"react\";\r\n\r\nconst Search = ({ searchChange }) => (\r\n  <div className=\"pa2\">\r\n    <input\r\n      className=\"pa3 ba b--green bg-lightest-blue\"\r\n      type=\"text\"\r\n      placeholder=\"Search Rebort\"\r\n      onChange={searchChange}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{ overflowY: \"scroll\", height: \"900px\", border: \"1px solid #000\" }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","export const setSearchField = text => ({\r\n  type: \"CHANGE_SEARCH_FIELD\",\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = dispatch => {\r\n  dispatch({ type: \"REQUEST_ROBOTS_PENDING\" });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .then(roboData => {\r\n      dispatch({ type: \"REQUEST_ROBOTS_SUCCESS\", payload: roboData });\r\n    })\r\n    .catch(err => {\r\n      dispatch({ type: \"REQUEST_ROBOTS_FAILED\", payload: err });\r\n    });\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState(() => {\r\n      return { hasError: true };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Error Happaned , Sorry for inconvension</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\nimport CartList from \"../components/CartList\";\r\nimport { connect } from \"react-redux\";\r\nimport Search from \"../components/Search\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport { setSearchField, requestRobots } from \"../action\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\n\r\n//mapStateToProps\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchFieldReducer.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\n// mapDispatchToProps\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSearchChange: e => dispatch(setSearchField(e.target.value.trim())),\r\n  onRequestRobots: () => dispatch(requestRobots)\r\n});\r\n\r\n// App Class\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  // render\r\n  render() {\r\n    let { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filterRobo = robots.filter(robo => {\r\n      return robo.name.toLocaleLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    //jsx\r\n    if (isPending) {\r\n      return <h1>Loading...</h1>;\r\n    }\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1>Robo Friend App</h1>\r\n        <Search searchChange={onSearchChange} searchField={searchField} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CartList robots={filterRobo} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport reduxThunk from \"redux-thunk\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { searchFieldReducer, requestRobots } from \"./reducer\";\nimport { createLogger } from \"redux-logger\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// store\nconst logger = createLogger();\nconst store = createStore(\n  combineReducers({ searchFieldReducer, requestRobots }),\n  applyMiddleware(reduxThunk, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}